{{- /*gotype: gs/parser.Service*/ -}}
// Code generated by gs. DO NOT EDIT
package http

import (
	genEndpoints "{{ .Config.Module }}/gen/services/{{.Name}}/endpoint"
	genHttp "{{ .Config.Module }}/gen/transport/http"
)

type serviceOptions struct {
	options      []genHttp.Option
{{range  .Endpoints }}
	{{lowerFirst .Name }}HTTPOptions []{{.Name}}HTTPOption
{{end}}
}

type ServiceHTTPOption func(*serviceOptions)

func WithHTTPOptions(options ...genHttp.Option) ServiceHTTPOption {
	return func(o *serviceOptions) {
		o.options = append(o.options, options...)
	}
}

{{range  .Endpoints }}
func With{{.Name }}HTTPOptions ({{lowerFirst .Name }}HTTPOptions ...{{ .Name }}HTTPOption) ServiceHTTPOption {
	return func(o *serviceOptions) {
		o.{{lowerFirst .Name }}HTTPOptions = append(o.{{lowerFirst .Name }}HTTPOptions , {{lowerFirst .Name }}HTTPOptions ...)
	}
}
{{end}}

func MakeHttpTransport(endpoints genEndpoints.Endpoints, opts ...ServiceHTTPOption) genHttp.Transport {
	svcOptions := &serviceOptions{}
	for _, o := range opts {
		o(svcOptions)
	}
	transportEndpoints := []func(options genHttp.Options) genHttp.HTTP{
{{range  .Endpoints }}
	func(options genHttp.Options) genHttp.HTTP {

			return make{{.Name}}HttpTransport(endpoints.{{.Name}}(), options, svcOptions.{{ lowerFirst .Name }}HTTPOptions ...)
	},
{{end}}
}
	return genHttp.NewHttpTransport(transportEndpoints, svcOptions.options...)
}

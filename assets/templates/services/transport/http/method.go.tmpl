{{- /*gotype: gs/generate.EndpointMethodData*/ -}}
// Code generated by gs. DO NOT EDIT
package http

import (
	definitions "{{ .Module }}/gen/services/{{.Service}}/endpoint/definitions"
	genHttp "{{ .Module }}/gen/transport/http"
	service "{{ .ServiceImport }}"
	{{ if .Endpoint.Request }} {{ $reqParam := index .Endpoint.Params 1}} {{ $reqParam.Type.Import.Alias }} "{{ $reqParam.Type.Import.Path }}" {{ end }}
	{{ if .Endpoint.Response }} {{ $resParam := index .Endpoint.Results 0}} {{ $resParam.Type.Import.Alias }} "{{ $resParam.Type.Import.Path }}" {{ end }}
	context "context"
	goKitEndpoint "github.com/go-kit/kit/endpoint"
	goKitHttp "github.com/go-kit/kit/transport/http"
	goHttp "net/http"
	chi "github.com/go-chi/chi/v5"
)

type {{ .Endpoint.Name }}DecodeRequestFunc func(context.Context{{if .Endpoint.Request}}, *goHttp.Request {{end}}) ({{if .Endpoint.Request}}{{ $reqParam := index .Endpoint.Params 1}}{{$reqParam.Type}},{{end}} error)

type {{ .Endpoint.Name }}EncodeResponseFunc func(context.Context, goHttp.ResponseWriter{{ if .Endpoint.Response }} {{ $resParam := index .Endpoint.Results 0}}, {{$resParam.Type}} {{end}}) error

{{$nameLower := lowerFirst .Endpoint.Name  }}

type {{ $nameLower }} struct {
	methodRoutes  []genHttp.MethodRoute
	serverOptions []goKitHttp.ServerOption
	errorEncoder  goKitHttp.ErrorEncoder
	decoder       {{ .Endpoint.Name }}DecodeRequestFunc
	encoder       {{ .Endpoint.Name }}EncodeResponseFunc
	endpoint      goKitEndpoint.Endpoint
	handle        goHttp.Handler
}
type {{ .Endpoint.Name }}HTTPOption func(*{{$nameLower}})

func set{{ .Endpoint.Name }}DefaultOptions(transport *{{$nameLower}}, httpOptions genHttp.Options) {
	transport.methodRoutes = append({{$nameLower}}RouteMethods(), transport.methodRoutes...)
	if transport.decoder == nil {
		transport.decoder = make{{ .Endpoint.Name }}Decoder(httpOptions)
	}
	if transport.encoder == nil {
		transport.encoder = make{{ .Endpoint.Name }}Encoder(httpOptions)
	}
	if transport.errorEncoder == nil {
		transport.errorEncoder = httpOptions.ErrorEncoder()
	}
	transport.serverOptions = append(httpOptions.ServerOptions(), transport.serverOptions...)
}

func make{{.Endpoint.Name}}HttpTransport(endpoint goKitEndpoint.Endpoint, httpOptions genHttp.Options, options ...{{ .Endpoint.Name }}HTTPOption) genHttp.HTTP {
	transport := &{{ $nameLower  }}{endpoint: endpoint}
    for _, option := range options {
        option(transport)
    }
    set{{ .Endpoint.Name }}DefaultOptions(transport, httpOptions)
    return transport
}

func {{ $nameLower  }}RouteMethods() []genHttp.MethodRoute {
	return []genHttp.MethodRoute{
    {{range .Endpoint.HttpTransport.MethodRoutes}}{
			Name:   "{{.Name}}",
			Route:  "{{.Route}}",
			Methods: []genHttp.Method{{"{"}}{{range $inx, $mth := .Methods}}{{ if gt $inx  0 }}, {{ end }}genHttp.{{ $mth }}{{ end }}{{"}"}},
		},{{end}}
    }
}


func make{{ .Endpoint.Name }}Decoder(httpOptions genHttp.Options) {{ .Endpoint.Name }}DecodeRequestFunc {
    return func (_ context.Context{{if .Endpoint.Request}}, r *goHttp.Request{{ end }}) ({{if .Endpoint.Request}}request  {{ $reqParam := index .Endpoint.Params 1 }} {{ $reqParam.Type }}, {{end}}err error) {
       	{{ if .Endpoint.Request }}
			{{ $tp := .Endpoint.HttpTransport}}
			{{if not $tp.Request.HasBody }}
			   err = httpOptions.{{httpRequestDecoder $tp.Request.Format.String }}()(r, &request)
			{{ end }}
			{{range $param := $tp.Request.Params }}
				{{$parser := $param.Parser}}
				{{if eq $param.ParamType "QUERY"}}
					request.{{$param.Field}}{{if (and (not (eq $parser nil) ) (not $parser.NoError))}}, err{{end}}= {{if not (eq $parser nil)}}utils.{{$param.Parser.Fn}}({{end}}r.URL.Query().Get("{{$param.Name}}"){{if not (eq $parser nil)}}){{end}}
				{{ else if eq $param.ParamType  "URL"}}
					request.{{$param.Field}}{{if (and (not (eq $parser nil) ) (not $parser.NoError))}}, err{{end}}= {{if not (eq $parser nil)}}utils.{{$param.Parser.Fn}}({{end}}chi.URLParam(r,"{{$param.Name}}"){{if not (eq $parser nil)}}){{end}}
				{{ end }}
				{{if (and (not (eq $parser nil) ) (not $parser.NoError))}}
					if err != nil {
						return request, errors.HTTPBadRequest(err.Error())
					}
				{{ end }}
			{{ end }}
			{{if $tp.Request.HasBody }}
				{{range $param := .Request.Params }}
					{{if eq $param.ParamType "BODY"}}
						err = httpOptions.{{httpRequestDecoder $param.Name }}(r, {{if not $param.Type.Pointer}}&{{end}}request.{{$param.Field}})
					{{ end }}
				{{ end}}
			{{ end }}
			return request, err
	   {{ else }}
               return err
	   {{ end }}
    }
}

func make{{ .Endpoint.Name }}Encoder(httpOptions genHttp.Options) {{ .Endpoint.Name }}EncodeResponseFunc {
    return func (ctx context.Context, w goHttp.ResponseWriter{{if .Endpoint.Response}}, response  {{ $respParam := index .Endpoint.Results 0 }} {{ $respParam.Type }} {{ end }}) error {
        {{if .Endpoint.Response}}return httpOptions.{{ httpResponseEncoder  .Endpoint.HttpTransport.ResponseFormat  }}()(ctx, w, response){{else}}
			w.WriteHeader(200)
			return nil{{ end }}
    }
}


func (h *{{ $nameLower  }}) MethodRoutes() []genHttp.MethodRoute {
	return h.methodRoutes
}

func (h *{{ $nameLower  }}) Handler() goHttp.Handler {
	if h.handle != nil {
		return h.handle
	}
	encoder := func(ctx context.Context, w goHttp.ResponseWriter, response interface{}) error {
		epResponse := response.(definitions.{{.Endpoint.Name}}Response)
		if epResponse.Err != nil {
			h.errorEncoder(ctx, epResponse.Err, w)
			return nil
		}
        {{ if .Endpoint.Response}}res := epResponse.Response{{ end }}
		return h.encoder(ctx, w{{ if .Endpoint.Response}}, res{{ end }})
	}
	decoder := func(ctx context.Context, r *goHttp.Request) (re interface{}, err error) {
        {{ if .Endpoint.Request }}
		return h.decoder(ctx, r)
        {{else}}
        return nil, h.decoder(ctx)
        {{end}}
	}
	return goKitHttp.NewServer(
		h.endpoint,
		decoder,
		encoder,
		h.serverOptions...,
	)
}


func With{{  .Endpoint.Name }}ServerOptions(opts ...goKitHttp.ServerOption) {{  .Endpoint.Name }}HTTPOption {
	return func(o *{{ lowerFirst  .Endpoint.Name }}) {
		o.serverOptions = append(o.serverOptions, opts...)
	}
}

func With{{ .Endpoint.Name }}Encoder(encoder {{ .Endpoint.Name }}EncodeResponseFunc) {{ .Endpoint.Name }}HTTPOption {
	return func(o *{{ $nameLower  }}) {
		o.encoder = encoder
	}
}

func With{{ .Endpoint.Name }}Decoder(decoder {{ .Endpoint.Name }}DecodeRequestFunc) {{ .Endpoint.Name }}HTTPOption {
	return func(o *{{ $nameLower  }}) {
		o.decoder = decoder
	}
}

func With{{ .Endpoint.Name }}MethodRoutes(routes ...genHttp.MethodRoute) {{ .Endpoint.Name }}HTTPOption {
	return func(o *{{ $nameLower  }}) {
		o.methodRoutes = append(o.methodRoutes, routes...)
	}
}

func With{{ .Endpoint.Name }}ErrorEncoder(errorEncoder goKitHttp.ErrorEncoder) {{ .Endpoint.Name }}HTTPOption {
	return func(o *{{ $nameLower  }}) {
		o.errorEncoder = errorEncoder
	}
}

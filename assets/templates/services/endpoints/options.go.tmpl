{{- /*gotype: gs/parser.Service*/ -}}
// Code generated by gs. DO NOT EDIT
package endpoint

import (
	"{{ .Config.Module }}/gen/services/{{.Package}}/endpoint/definitions"

	goKitEndpoint "github.com/go-kit/kit/endpoint"
)

type options struct {
	middleware []goKitEndpoint.Middleware

{{ range .Endpoints }} 	{{ lowerFirst  .Name  }}Options    []{{ .Name }}Option
{{ end }}
}

type Option func(*options)

func WithEndpointMiddleware(middleware ...goKitEndpoint.Middleware) Option {
	return func(o *options) {
		o.middleware = append(o.middleware, middleware...)
	}
}
{{ range .Endpoints }}
func With{{ .Name }}Options(	{{ lowerFirst .Name  }}Options ...{{ .Name }}Option) Option {
	return func(o *options) {
		o.{{ lowerFirst .Name  }}Options = append(o.{{ lowerFirst .Name  }}Options, {{ lowerFirst .Name  }}Options...)
	}
}

func With{{ .Name }}Endpoint(endpoint definitions.{{ .Name }}EndpointFunc) {{ .Name }}Option {
	return func(o *{{ lowerFirst .Name  }}) {
		o.endpoint = endpoint
	}
}

func With{{ .Name }}Middleware(middleware ...definitions.{{ .Name }}EndpointMiddleware) {{ .Name }}Option {
	return func(o *{{ lowerFirst .Name  }}) {
		o.middleware = append(o.middleware, middleware...)
	}
}
{{ end }}
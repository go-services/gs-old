{{- /*gotype: gs/parser.Service*/ -}}
// Code generated by gs. DO NOT EDIT
package auth

import (
	genEndpoint "{{ .Config.Module }}/gen/services/{{.Package}}/endpoint"
	genServiceHttp "{{ .Config.Module }}/gen/services/{{.Package}}/transport/http"
	genHttp "{{ .Config.Module }}/gen/transport/http"
	service "{{ .Import }}"
	"github.com/go-chi/chi/v5"
)

type Middleware func(service.{{.Interface}}) service.{{.Interface}}

type options struct {
	serviceMiddleware []Middleware
	httpOptions       []genServiceHttp.ServiceHTTPOption
	endpointOptions   []genEndpoint.Option
}

type Option func(*options)

func WithServiceMiddleware(middleware ...Middleware) Option {
	return func(o *options) {
		o.serviceMiddleware = append(o.serviceMiddleware, middleware...)
	}
}

func WithHttpOptions(httpOptions ...genServiceHttp.ServiceHTTPOption) Option {
	return func(o *options) {
		o.httpOptions = append(o.httpOptions, httpOptions...)
	}
}

func WithEndpointOptions(endpointOptions ...genEndpoint.Option) Option {
	return func(o *options) {
		o.endpointOptions = append(o.endpointOptions, endpointOptions...)
	}
}

type GeneratedService interface {
	Router() *chi.Mux
}

type generatedService struct {
	options options
	http    genHttp.Transport
}

func New(svc service.{{.Interface}}, options ...Option) GeneratedService {
	genSvc := generatedService{}
	for _, option := range options {
		option(&genSvc.options)
	}

	for _, m := range genSvc.options.serviceMiddleware {
		svc = m(svc)
	}
	endpoints := genEndpoint.MakeEndpoints(svc, genSvc.options.endpointOptions...)
	genSvc.http = genServiceHttp.MakeHttpTransport(endpoints, genSvc.options.httpOptions...)

	return genSvc
}

func (service generatedService) Router() *chi.Mux {
	return service.http.Router()
}

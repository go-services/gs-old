// Code generated by gs. DO NOT EDIT
package gen
import (
    "{{ .Import }}/gen/endpoint"
    "{{ .Import }}/gen/transport"
    genService "{{ .Import }}/gen/service"
    generatedTransport "{{ .Import }}/gen/transport/http"
    service "{{ .Import }}"
    kitEndpoint "github.com/go-kit/kit/endpoint"
    "github.com/go-kit/kit/transport/http"
    {{ range middleware := .Middlewares }}
     {{ if middleware.Import != "" }}
      {{ middleware.Alias }} "{{ middleware.Import }}"
     {{ end }}
    {{ end }}
)

type serviceTransport struct {
    http generatedTransport.Transport
}

func (b *serviceTransport) HTTP() generatedTransport.Transport {
    return b.http
}

func MakeService(svc service.{{ .Interface }}, mdw ...genService.Middleware) service.{{ .Interface }} {
   {{ if len(.Middlewares) }}
    mdw = append([]genService.Middleware{
        {{ range middleware := .Middlewares }}
         {{ if middleware.Import != "" }}
          {{ middleware.Alias }}.{{ middleware.Method }}(),
         {{ end }}
        {{ end }}
        }, mdw...)
    {{ end }}
    for _, m := range mdw {
        svc = m(svc)
    }
    return svc
}

func MakeTransports(endpoints endpoint.Endpoints, httpOptions ...http.ServerOption) transport.Transports {
    httpTransport := generatedTransport.MakeHttpTransport(endpoints, httpOptions...)
    return &serviceTransport{
        http: httpTransport,
    }
}

func MakeEndpoints(b service.{{ .Interface }}, global ...kitEndpoint.Middleware) endpoint.Endpoints {
    serviceEndpoints := endpoint.MakeEndpoints(b, global...)
    return serviceEndpoints
}

// Code generated by gs. DO NOT EDIT
package gen

import (
	genEndpoint "{{ .Import }}/gen/endpoint"
	genService "{{ .Import }}/gen/service"{{if .GRPCTransport}}
	genGrpc "{{ .Import }}/gen/transport/grpc"{{ end }}
	genHttp "{{ .Import }}/gen/transport/http"

	"github.com/go-kit/kit/log"
)

type Mode string

const (
	none  Mode = ""
	DEBUG      = "debug"
	PROD       = "prod"
)

type options struct {
	serviceMiddleware []genService.Middleware
	serviceLogger     log.Logger
	debugAddress      string
	serviceMode       Mode

	httpOptions []genHttp.Option{{if .GRPCTransport}}
	grpcOptions []genGrpc.Option{{ end }}

	endpointOptions []genEndpoint.Option
}

type Option func(*options)

func ServiceMode(mode Mode) Option {
	return func(o *options) {
		o.serviceMode = mode
	}
}
func DebugAddress(address string) Option {
	return func(o *options) {
		o.debugAddress = address
	}
}

func ServiceMiddleware(middleware ...genService.Middleware) Option {
	return func(o *options) {
		o.serviceMiddleware = append(o.serviceMiddleware, middleware...)
	}
}

func HttpOptions(httpOptions ...genHttp.Option) Option {
	return func(o *options) {
		o.httpOptions = append(o.httpOptions, httpOptions...)
	}
}
{{if .GRPCTransport}}
func GrpcOptions(grpcOptions ...genGrpc.Option) Option {
	return func(o *options) {
		o.grpcOptions = append(o.grpcOptions, grpcOptions...)
	}
}
{{ end }}
func EndpointOptions(endpointOptions ...genEndpoint.Option) Option {
	return func(o *options) {
		o.endpointOptions = append(o.endpointOptions, endpointOptions...)
	}
}

func Logger(logger log.Logger) Option {
	return func(o *options) {
		o.serviceLogger = logger
	}
}

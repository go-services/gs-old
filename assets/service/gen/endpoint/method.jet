// Code generated by gs. DO NOT EDIT
package endpoint
import (
	"context"
	"github.com/go-kit/kit/endpoint"
	service "{{ .Service.Import }}"
	"{{ .Service.Import }}/gen/endpoint/definitions"
)

type {{ lowerFirst( .Endpoint.Name ) }} struct {
	endpoint         definitions.{{ .Endpoint.Name }}EndpointFunc
	middleware       []definitions.{{ .Endpoint.Name }}EndpointMiddleware
	globalMiddleware []endpoint.Middleware
}

type {{ .Endpoint.Name }}Option func(*{{ lowerFirst( .Endpoint.Name ) }})

func make{{ .Endpoint.Name }}Endpoint(svc service.{{ .Service.Interface }}, global []endpoint.Middleware, {{ lowerFirst( .Endpoint.Name ) }}Options ...{{ .Endpoint.Name }}Option) endpoint.Endpoint {
	ep := &{{ lowerFirst( .Endpoint.Name ) }}{
        globalMiddleware: global,
    }
    for _, option := range {{ lowerFirst( .Endpoint.Name ) }}Options {
        option(ep)
    }
    if ep.endpoint == nil {
        ep.endpoint = {{ lowerFirst( .Endpoint.Name ) }}Endpoint(svc)
    }
    return ep.Endpoint()
}

func {{ lowerFirst( .Endpoint.Name ) }}Endpoint(b service.{{ .Service.Interface }}) definitions.{{ .Endpoint.Name }}EndpointFunc {
	return func(ctx context.Context{{  if .Endpoint.Request }}, req {{ reqParam := .Endpoint.Params[1]}} {{ reqParam.Type}} {{ end }}) (definitions.{{ .Endpoint.Name }}Response, error) {
		{{  if .Endpoint.Response }} res, {{ end }} err := b.{{ .Endpoint.Name }}(ctx{{ if .Endpoint.Request }}, req {{ end }})
		return definitions.{{ .Endpoint.Name }}Response{{"{"}}{{  if .Endpoint.Response }}Response:res, {{ end }}Err: err}, nil
	}
}

func (e *{{ lowerFirst( .Endpoint.Name ) }}) Endpoint() endpoint.Endpoint {
	ep := e.endpoint
	for _, mdw := range e.middleware {
		ep = mdw(ep)
	}
	kitEp := func(ctx context.Context, request interface{}) (response interface{}, err error) {
        {{ if .Endpoint.Request }}req := request.({{ reqParam := .Endpoint.Params[1]}} {{ reqParam.Type }}) {{ end }}
        return ep(ctx{{ if  .Endpoint.Request }}, req{{ end }})
	}
	for _, mdw := range e.globalMiddleware {
		kitEp = mdw(kitEp)
	}
	return kitEp
}
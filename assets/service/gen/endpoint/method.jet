// Code generated by gs. DO NOT EDIT
package endpoint
import (
	"context"
	"github.com/go-kit/kit/endpoint"
	service "{{ .Service.Import }}"
	"{{ .Service.Import }}/gen/endpoint/definitions"
	{{ range middleware := .Endpoint.Middlewares }}
     {{ if middleware.Import != "" }}
      {{ middleware.Alias }} "{{ middleware.Import }}"
     {{ end }}
    {{ end }}
)

type {{ .Endpoint.Name }}Endpoint interface {
	Middleware(...definitions.{{ .Endpoint.Name }}EndpointMiddleware)
	Endpoint() endpoint.Endpoint
	Set(definitions.{{ .Endpoint.Name }}EndpointFunc)
}
type {{ lowerFirst( .Endpoint.Name ) }} struct {
	endpoint         definitions.{{ .Endpoint.Name }}EndpointFunc
	middleware       []definitions.{{ .Endpoint.Name }}EndpointMiddleware
	globalMiddleware []endpoint.Middleware
}

func make{{ .Endpoint.Name }}Endpoint(svc service.{{ .Service.Interface }}, global ...endpoint.Middleware) {{ .Endpoint.Name }}Endpoint {
	return &{{ lowerFirst( .Endpoint.Name ) }}{
		endpoint:         {{ lowerFirst (.Endpoint.Name) }}Endpoint(svc),
		middleware:[]definitions.{{ .Endpoint.Name }}EndpointMiddleware{
		{{ range middleware := .Endpoint.Middlewares }} {{if middleware.Alias == "" }} service{{else}}{{middleware.Alias}}{{end}}.{{middleware.Method}},{{end}}
		},
		globalMiddleware: global,
	}
}

func {{ lowerFirst( .Endpoint.Name ) }}Endpoint(b service.{{ .Service.Interface }}) definitions.{{ .Endpoint.Name }}EndpointFunc {
	return func(ctx context.Context{{  if .Endpoint.Request }}, req {{ reqParam := .Endpoint.Params[1]}} {{ reqParam.Type}} {{ end }}) (definitions.{{ .Endpoint.Name }}Response, error) {
		{{  if .Endpoint.Response }} res, {{ end }} err := b.{{ .Endpoint.Name }}(ctx{{ if .Endpoint.Request }}, req {{ end }})
		return definitions.{{ .Endpoint.Name }}Response{{"{"}}{{  if .Endpoint.Response }}Response:res, {{ end }}Err: err}, nil
	}
}

func (e *{{ lowerFirst( .Endpoint.Name ) }}) Endpoint() endpoint.Endpoint {
	ep := e.endpoint
	for left, right := 0, len(e.middleware)-1; left < right; left, right = left+1, right-1 {
		 e.middleware[left],  e.middleware[right] =  e.middleware[right],  e.middleware[left]
	}
	for _, mdw := range e.middleware {
		ep = mdw(ep)
	}
	kitEp := func(ctx context.Context, request interface{}) (response interface{}, err error) {
        {{ if .Endpoint.Request }}req := request.({{ reqParam := .Endpoint.Params[1]}} {{ reqParam.Type }}) {{ end }}
        return ep(ctx{{ if  .Endpoint.Request }}, req{{ end }})
	}
	for left, right := 0, len(e.globalMiddleware)-1; left < right; left, right = left+1, right-1 {
		 e.globalMiddleware[left],  e.globalMiddleware[right] =  e.globalMiddleware[right],  e.globalMiddleware[left]
	}
	for _, mdw := range e.globalMiddleware {
		kitEp = mdw(kitEp)
	}
	return kitEp
}

func (e *{{ lowerFirst( .Endpoint.Name ) }}) Set(endpoint definitions.{{ .Endpoint.Name }}EndpointFunc) {
	e.endpoint = endpoint
}

func (e *{{ lowerFirst( .Endpoint.Name ) }}) Middleware(mdw ...definitions.{{ .Endpoint.Name }}EndpointMiddleware) {
	e.middleware = append(e.middleware, mdw...)
}

// Code generated by gs. DO NOT EDIT
package http

import (
	"{{ .Import }}/gen/endpoint"
	"github.com/gorilla/mux"
	"github.com/gorilla/schema"
	"context"
	goHttp "net/http"
	goKitHttp "github.com/go-kit/kit/transport/http"
)

type Method string

const (
	GET     Method = goHttp.MethodGet
	PUT            = goHttp.MethodPut
	POST           = goHttp.MethodPost
	HEAD           = goHttp.MethodHead
	PATCH          = goHttp.MethodPatch
	DELETE         = goHttp.MethodDelete
	OPTIONS        = goHttp.MethodOptions
	TRACE          = goHttp.MethodTrace
	CONNECT        = goHttp.MethodConnect
)

type MethodRoute struct {
	Name   string
	Methods []Method
	Route  string
}

type HTTP interface {
	MethodRoutes() []MethodRoute
	Options([]goKitHttp.ServerOption)
	Handler() goHttp.Handler
}
type Transport interface {
	{{ range .Endpoints }}{{if .HttpTransport}}{{ .Name }}() {{ .Name }}HTTP{{end}}
{{ end }}
	Iterate(func(httpTransport HTTP))
}

type httpTransport struct {
	{{ range .Endpoints}}{{if .HttpTransport}}{{ lowerFirst( .Name ) }} {{ .Name }}HTTP{{end}}
{{ end }}}

var decoder = schema.NewDecoder()

var defaultErrorEncoder = goKitHttp.DefaultErrorEncoder

func SetDefaultErrorEncoder(encoder goKitHttp.ErrorEncoder) {
	defaultErrorEncoder = encoder
}

var defaultResponseEncoder = defaultJSONEncoder

var defaultJSONEncoder = goKitHttp.EncodeJSONResponse

func SetDefaultJSONEncoder(encoder ResponseEncoder) {
	defaultJSONEncoder = encoder
}
var defaultXMLEncoder = EncodeXMLResponse

func SetDefaultXMLEncoder(encoder ResponseEncoder) {
	defaultXMLEncoder = encoder
}

func EncodeXMLResponse(_ context.Context, w goHttp.ResponseWriter, response interface{}) error {
	w.Header().Set("Content-Type", "application/xml; charset=utf-8")
	if headerer, ok := response.(goKitHttp.Headerer); ok {
		for k, values := range headerer.Headers() {
			for _, v := range values {
				w.Header().Add(k, v)
			}
		}
	}
	code := goHttp.StatusOK
	if sc, ok := response.(goKitHttp.StatusCoder); ok {
		code = sc.StatusCode()
	}
	w.WriteHeader(code)
	if code == goHttp.StatusNoContent {
		return nil
	}
	return xml.NewEncoder(w).Encode(response)
}

type ResponseEncoder func(context.Context, goHttp.ResponseWriter, interface{}) error

func SetDefaultResponseEncoder(encoder ResponseEncoder) {
defaultResponseEncoder = encoder
}

type DecoderFunc func(*goHttp.Request, interface{}) error

var defaultJSONDecoder = func(r *goHttp.Request, strc interface{}) error {
	if r.Body == goHttp.NoBody {
		return nil
	}
	return json.NewDecoder(r.Body).Decode(strc)
}

func SetDefaultJSONDecoder(decoder DecoderFunc) {
	defaultJSONDecoder = decoder
}

var defaultXMLDecoder = func(r *goHttp.Request, strc interface{}) error {
	if r.Body == goHttp.NoBody {
		return nil
	}
	return xml.NewDecoder(r.Body).Decode(strc)
}

func SetDefaultXMLDecoder(decoder DecoderFunc) {
	defaultXMLDecoder = decoder
}

var defaultFormDecoder = func(r *goHttp.Request, strc interface{}) error {
	err := r.ParseForm()
	if err != nil {
		return err
	}
	return decoder.Decode(strc, r.PostForm)
}

func SetDefaultFormDecoder(decoder DecoderFunc) {
	defaultXMLDecoder = decoder
}

var defaultHttpAddress = "{{ .Config.Http.Url }}:{{ .Config.Http.Port }}"

func SetHttpAddress(address string) {
	defaultHttpAddress = address
}
func Address() string {
	return defaultHttpAddress
}

func MakeHttpTransport(endpoints endpoint.Endpoints, global ...goKitHttp.ServerOption) Transport {
	httpTransport := makeRootHttpTransport(endpoints)
	{{ range .Endpoints }}{{if .HttpTransport}}httpTransport.{{ .Name }}().Options(global){{end}}
	{{ end }}return httpTransport
}
func makeRootHttpTransport(endpoints endpoint.Endpoints) Transport {
	return &httpTransport{
		{{ range .Endpoints}}{{if .HttpTransport}}{{ lowerFirst( .Name  ) }}:    make{{ .Name }}HttpTransport(endpoints.{{ .Name }}().Endpoint()),{{end}}
	{{ end }}}
}
{{ range .Endpoints}}
{{if .HttpTransport}}
func (t *httpTransport) {{ .Name }}() {{ .Name }}HTTP {
	return t.{{ lowerFirst( .Name ) }}
}
{{end}}
{{ end }}
func (t *httpTransport) Iterate(iterFunc func(HTTP)) {
	all := []HTTP{
		{{ range .Endpoints }}{{if .HttpTransport}}t.{{ lowerFirst( .Name ) }},{{end}}
	{{ end }}}

	for _, m := range all {
		iterFunc(m)
	}
}

func SetupHttp(httpTransport Transport, router *mux.Router) {
	httpTransport.Iterate(func(method HTTP) {
		for _, route := range method.MethodRoutes() {
			var methods []string
			for _, method := range route.Methods{
				methods = append(methods, string(method))
			}
			router.Methods(methods...).Path(route.Route).Handler(method.Handler())
		}
	})
}

func AddHttpServerOption(httpTransport Transport, opts ...goKitHttp.ServerOption) {
	httpTransport.Iterate(func(method HTTP) {
		method.Options(opts)
	})
}

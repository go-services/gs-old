// Code generated by gs. DO NOT EDIT
package http
import (
	"{{ .Service.Import }}/gen/endpoint"
	"{{ .Service.Import }}/gen/endpoint/definitions"
	"{{ .Service.Import }}/gen/utils"
	"context"
	"github.com/gorilla/mux"
	"encoding/json"

	goKitEndpoint "github.com/go-kit/kit/endpoint"
	goKitHttp "github.com/go-kit/kit/transport/http"
	goHttp "net/http"
{{if .Endpoint.RequestImport}}{{.Endpoint.RequestImport.Alias}} "{{.Endpoint.RequestImport.Path}}" {{end}}
{{if .Endpoint.ResponseImport}}{{.Endpoint.ResponseImport.Alias}} "{{.Endpoint.ResponseImport.Path}}" {{end}}
)
type {{ .Endpoint.Name }}DecodeRequestFunc func(context.Context{{if .Endpoint.Request}} , *goHttp.Request{{ end }}) ({{if .Endpoint.Request}} {{.Endpoint.Params[1].Type}} , {{ end }}error)

type {{ .Endpoint.Name }}EncodeResponseFunc func(context.Context, goHttp.ResponseWriter{{if .Endpoint.Response}}, {{ .Endpoint.Results[0].Type }} {{end}}) error

type {{ lowerFirst( .Endpoint.Name ) }} struct {
	methodRoutes []MethodRoute
	serverOptions      []goKitHttp.ServerOption
    errorEncoder  goKitHttp.ErrorEncoder
    decoder      {{ .Endpoint.Name }}DecodeRequestFunc
	encoder      {{ .Endpoint.Name }}EncodeResponseFunc
	endpoint     goKitEndpoint.Endpoint
	handle       goHttp.Handler
}

type {{ .Endpoint.Name }}Option func(*{{ lowerFirst( .Endpoint.Name ) }})

func set{{ .Endpoint.Name }}DefaultOptions(transport *{{ lowerFirst( .Endpoint.Name ) }}, httpOptions options) {
	transport.methodRoutes = append({{ lowerFirst( .Endpoint.Name ) }}RouteMethods(), transport.methodRoutes...)
	if transport.decoder == nil {
		transport.decoder = make{{ .Endpoint.Name }}Decoder(httpOptions)
	}
	if transport.encoder == nil {
		transport.encoder = make{{ .Endpoint.Name }}Encoder(httpOptions)
	}
	if transport.errorEncoder == nil {
		transport.errorEncoder = httpOptions.errorEncoder
	}
	transport.serverOptions = append(httpOptions.serverOptions, transport.serverOptions...)
}

func make{{.Endpoint.Name}}HttpTransport(endpoint goKitEndpoint.Endpoint, httpOptions options, options ...{{ .Endpoint.Name }}Option) HTTP {
	transport := &{{ lowerFirst( .Endpoint.Name ) }}{endpoint: endpoint}
    for _, option := range options {
        option(transport)
    }
    set{{ .Endpoint.Name }}DefaultOptions(transport, httpOptions)
    return transport
}

func {{ lowerFirst( .Endpoint.Name ) }}RouteMethods() []MethodRoute {
	return []MethodRoute{
    {{range .Endpoint.HttpTransport.MethodRoutes}}{
			Name:   "{{.Name}}",
			Route:  "{{.Route}}",
			Methods: []Method{{"{"}}{{range inx, mth := .Methods}}{{ if inx > 0 }}, {{ end }}{{ mth }}{{ end }}{{"}"}},
		},{{end}}
    }
}
func make{{ .Endpoint.Name }}Decoder(httpOptions options) {{ .Endpoint.Name }}DecodeRequestFunc {
    return func (_ context.Context{{if .Endpoint.Request}}, r *goHttp.Request{{ end }}) ({{if .Endpoint.Request}}request  {{ reqParam := .Endpoint.Params[1] }} {{ reqParam.Type }}, {{end}}err error) {
       	{{ if .Endpoint.Request }}
       	 {{ reqParam := .Endpoint.Params[1] }}
               request =  {{ reqParam.Type }}{}
               {{include "./_decoder.jet" .Endpoint.HttpTransport}}
           {{ else }}
               return err
           {{ end }}
    }
}

func make{{ .Endpoint.Name }}Encoder(httpOptions options) {{ .Endpoint.Name }}EncodeResponseFunc {
    return func (ctx context.Context, w goHttp.ResponseWriter{{if .Endpoint.Response}}, response  {{ respParam := .Endpoint.Results[0] }} {{ respParam.Type }} {{ end }}) error {
        {{if .Endpoint.Response}}return httpOptions.{{ httpResponseEncoder( .Endpoint.HttpTransport.ResponseFormat ) }}(ctx, w, response){{else}}return nil{{ end }}
    }
}

func (h *{{ lowerFirst( .Endpoint.Name ) }}) MethodRoutes() []MethodRoute {
	return h.methodRoutes
}

func (h *{{ lowerFirst( .Endpoint.Name ) }}) Handler() goHttp.Handler {
	if h.handle != nil {
		return h.handle
	}
	encoder := func(ctx context.Context, w goHttp.ResponseWriter, response interface{}) error {
		epResponse := response.(definitions.{{.Endpoint.Name}}Response)
		if epResponse.Err != nil {
			h.errorEncoder(ctx, epResponse.Err, w)
			return nil
		}
        {{ if .Endpoint.Response}}res := epResponse.Response{{ end }}
		return h.encoder(ctx, w{{ if .Endpoint.Response}}, res{{ end }})
	}
	decoder := func(ctx context.Context, r *goHttp.Request) (re interface{}, err error) {
        {{ if .Endpoint.Request }}
		return h.decoder(ctx, r)
        {{else}}
        return nil, h.decoder(ctx)
        {{end}}
	}
	return goKitHttp.NewServer(
		h.endpoint,
		decoder,
		encoder,
		h.serverOptions...,
	)
}
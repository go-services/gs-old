package grpc

import (
	service "{{.Service.Import}}"
	"{{.Service.Import}}/gen/endpoint/definitions"
	"{{ .Service.Import }}/gen/utils"
	"context"
	goKitEndpoint "github.com/go-kit/kit/endpoint"
	goKitGRPC "github.com/go-kit/kit/transport/grpc"
	{{svcImport := .Service.Import }}
    {{reqImport := .GRPCEndpoint.Endpoint.RequestImport}}
    {{resImport := .GRPCEndpoint.Endpoint.ResponseImport}}
    {{if reqImport  && reqImport.Path != svcImport }}{{reqImport.Alias}} "{{reqImport.Path}}" {{end}}
    {{if resImport && resImport.Path != svcImport}}{{resImport.Alias}} "{{resImport.Path}}" {{end}}
)

type {{.GRPCEndpoint.Name}}DecodeRequestFunc = func(context.Context{{if .GRPCEndpoint.Endpoint.Request}}, *{{.GRPCEndpoint.RequestMessage.Name}}{{end}}) ({{if .GRPCEndpoint.Endpoint.Request}} {{.GRPCEndpoint.Endpoint.Params[1].Type}} , {{end}}error)
type {{.GRPCEndpoint.Name}}EncodeResponseFunc = func(context.Context{{if .GRPCEndpoint.Endpoint.Response}},  {{.GRPCEndpoint.Endpoint.Results[0].Type}}{{end}}) ({{if .GRPCEndpoint.Endpoint.Response}}*{{.GRPCEndpoint.ResponseMessage.Name}},{{end}}error)

type {{ lowerFirst(.GRPCEndpoint.Name) }} struct {
	options  []goKitGRPC.ServerOption
	decoder  {{.GRPCEndpoint.Name}}DecodeRequestFunc
	encoder  {{.GRPCEndpoint.Name}}EncodeResponseFunc
	endpoint goKitEndpoint.Endpoint
	handle   goKitGRPC.Handler
}

type {{.GRPCEndpoint.Name}}GRPC interface {
	GRPC
	Handler() goKitGRPC.Handler
	SetDecoder({{.GRPCEndpoint.Name}}DecodeRequestFunc)
	SetEncoder({{.GRPCEndpoint.Name}}EncodeResponseFunc)
	SetHandle(goKitGRPC.Handler)
}

func make{{.GRPCEndpoint.Name}}GRPCTransport(endpoint goKitEndpoint.Endpoint) {{.GRPCEndpoint.Name}}GRPC {
	return &{{ lowerFirst(.GRPCEndpoint.Name) }}{
		decoder:  {{ lowerFirst(.GRPCEndpoint.Name) }}Decoder,
		encoder:  {{ lowerFirst(.GRPCEndpoint.Name) }}Encoder,
		endpoint: endpoint,
	}
}


func {{ lowerFirst(.GRPCEndpoint.Name) }}Decoder(_ context.Context{{if .GRPCEndpoint.Endpoint.Request}}, req *{{.GRPCEndpoint.RequestMessage.Name}}{{end}}) ({{if .GRPCEndpoint.Endpoint.Request}} {{.GRPCEndpoint.Endpoint.Params[1].Type}} , {{end}}error) {
     {{if .GRPCEndpoint.Endpoint.Request }}return *decode{{.GRPCEndpoint.RequestMessage.Name}}(req), nil{{ else }}return nil{{ end }}
}

func {{ lowerFirst(.GRPCEndpoint.Name) }}Encoder(_ context.Context{{ if .GRPCEndpoint.Endpoint.Response}},  res{{.GRPCEndpoint.Endpoint.Results[0].Type}}{{end}}) ({{if .GRPCEndpoint.Endpoint.Response}}*{{.GRPCEndpoint.ResponseMessage.Name}},{{end}}error) {
     {{if .GRPCEndpoint.Endpoint.Response }}return &{{.GRPCEndpoint.ResponseMessage.Name}}{
        {{ if .GRPCEndpoint.Endpoint.Response}}Response: encode{{.GRPCEndpoint.ResponseMessage.Params[1].Message.Name}}(res),{{ end }}
     }, nil{{ else }}return nil{{ end }}
}

func (h *{{ lowerFirst(.GRPCEndpoint.Name) }}) Options(options []goKitGRPC.ServerOption) {
	h.options = append(h.options, options...)
}

func (h *{{ lowerFirst(.GRPCEndpoint.Name) }}) SetDecoder(decoder {{.GRPCEndpoint.Name}}DecodeRequestFunc) {
	h.decoder = decoder
}

func (h *{{ lowerFirst(.GRPCEndpoint.Name) }}) SetEncoder(encoder {{.GRPCEndpoint.Name}}EncodeResponseFunc) {
	h.encoder = encoder
}

func (h *{{ lowerFirst(.GRPCEndpoint.Name) }}) SetHandle(handle goKitGRPC.Handler) {
	h.handle = handle
}

func (h *{{ lowerFirst(.GRPCEndpoint.Name) }}) Handler() goKitGRPC.Handler {
	if h.handle != nil {
		return h.handle
	}
	encoder := func(ctx context.Context, response interface{}) (re interface{}, err error) {
		epResponse := response.(definitions.{{.GRPCEndpoint.Name}}Response)
		if epResponse.Err != nil {
			return &{{.GRPCEndpoint.ResponseMessage.Name}}{
				Err:      defaultErrorEncoder(epResponse.Err),
			}, nil
		}
        {{ if .GRPCEndpoint.Endpoint.Response}}res := epResponse.Response{{ end }}
		return {{ if !.GRPCEndpoint.Endpoint.Response}}nil, {{end}}h.encoder(ctx{{ if .GRPCEndpoint.Endpoint.Response}}, res{{ end }})
	}
	decoder := func(ctx context.Context, r interface{}) (re interface{}, err error) {
        {{ if .GRPCEndpoint.Endpoint.Request }}
        req := r.(*{{ .GRPCEndpoint.RequestMessage.Name}})
        return h.decoder(ctx, req)
        {{else}}
        return nil, h.decoder(ctx)
        {{end}}
	}
	return goKitGRPC.NewServer(
		h.endpoint,
		decoder,
		encoder,
		h.options...,
	)
}

// Code generated by gs. DO NOT EDIT
// Code generated by gs. DO NOT EDIT
package grpc

import (
	"{{ .Import }}/gen/endpoint"
	"context"
	goKitGRPC "github.com/go-kit/kit/transport/grpc"
)

type Transport interface {
    Address() string
	Server() {{ .Interface }}Server
}

type grpcTransport struct {
	options_ options
{{ range .GRPCTransport.GRPCEndpoint}}
    {{ lowerFirst(.Name) }} {{.Name}}GRPC
{{end}}
}

func setDefaultOptions(opts *options) {
	if opts.address == "" {
		opts.address = "{{ .Config.Grpc.Url }}:{{ .Config.Grpc.Port }}"
	}
	if opts.errorEncoder == nil {
		opts.errorEncoder = func(err error) string {
			if err == nil {
				return ""
			}
			return err.Error()
		}
	}
}

func MakeGRPCTransport(endpoints endpoint.Endpoints, opts ...Option) Transport {
    grpcOptions := &options{}
	for _, o := range opts {
		o(grpcOptions)
	}
	setDefaultOptions(grpcOptions)
    return &grpcTransport{
        options_: *grpcOptions,
        {{ range .GRPCTransport.GRPCEndpoint}}
        {{ lowerFirst(.Name) }}:  make{{ .Name }}GRPCTransport(endpoints.{{ .Name }}(), *grpcOptions, grpcOptions. {{ lowerFirst(.Name) }}Options...),
        {{end}}
    }
}

type grpcServer struct {
	transport *grpcTransport
}

func (t *grpcTransport) Server() {{ .Interface }}Server {
	return grpcServer{
		transport: t,
	}
}

func (t *grpcTransport) Address() string {
	return t.options_.address
}

{{ range .GRPCTransport.GRPCEndpoint }}
func (g grpcServer) {{.Name}}(ctx context.Context, req *{{.RequestMessage.Name}}) (*{{.ResponseMessage.Name}}, error) {
	_, rep, err := g.transport.{{ lowerFirst(.Name) }}.Handler().ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*{{.ResponseMessage.Name}}), nil
}
{{end}}
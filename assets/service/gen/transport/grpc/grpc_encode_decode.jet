package grpc

import (
	service "{{.Import}}"
	"{{ .Import }}/gen/utils"
	{{svcImport := .Import }}
	{{ range .GRPCTransport.GRPCEndpoint}}{{ range .Messages}}{{ if .Type.Import && .Type.Import.Path != svcImport }} {{.Type.Import.Alias}} "{{.Type.Import.Path}}" {{end}}
	{{end}}{{end}}
)
{{ range .GRPCTransport.GRPCEndpoint}}
{{ range .Messages}}
{{ if .Type.Import }}
 func decode{{.Name}}(r *{{.Name}}) *{{.Type.Import.Alias}}.{{.Type.Qualifier}}{
    if r == nil {
        return  &{{.Type.Import.Alias}}.{{.Type.Qualifier}}{}
    }
    return &{{.Type.Import.Alias}}.{{.Type.Qualifier}}{
        {{ range param := .Params}}
        {{ if !param.Message }}{{param.Name}}:{{if param.GoType.Pointer}}&{{end}}{{if param.GoType.Qualifier == "int"}}{{if param.GoType.ArrayType}}utils.Int64ArrToIntArr{{else}}int{{end}}(r.{{param.Name}}){{else}}r.{{param.Name}}{{end}},{{end}}
        {{ if param.Message }}{{param.Name}}:{{if !param.GoType.Pointer}}*{{end}}decode{{param.Message.Name}}{{if param.GoType.ArrayType}}Arr{{end}}(r.{{param.Name}}),{{end}}
        {{ end }}
    }
 }
 func decode{{.Name}}Arr(r []*{{.Name}}) *[]{{.Type.Import.Alias}}.{{.Type.Qualifier}}{
    list := []{{.Type.Import.Alias}}.{{.Type.Qualifier}}{}
    for _, v := range r {
        list = append(list, *decode{{.Name}}(v))
    }
    return &list
 }
  func encode{{.Name}}(r *{{.Type.Import.Alias}}.{{.Type.Qualifier}}) *{{.Name}}{
     if r == nil {
         return  &{{.Name}}{}
     }
     return &{{.Name}}{
         {{ range param := .Params}}
         {{ if !param.Message }}{{param.Name}}:{{if param.GoType.Pointer}}*{{end}}{{if param.GoType.Qualifier == "int"}}{{if param.GoType.ArrayType}}utils.IntArrToInt64Arr{{else}}int64{{end}}(r.{{param.Name}}){{else}}r.{{param.Name}}{{end}},{{end}}
         {{ if param.Message }}{{param.Name}}:encode{{param.Message.Name}}{{if param.GoType.ArrayType}}Arr{{end}}(r.{{param.Name}}),{{end}}
         {{ end }}
     }
  }
 func encode{{.Name}}Arr(r []{{.Type.Import.Alias}}.{{.Type.Qualifier}}) []*{{.Name}}{
    list := []*{{.Name}}{}
    for _, v := range r {
        list = append(list, encode{{.Name}}(&v))
    }
    return list
 }
{{ end }}
{{ end }}
{{ end }}
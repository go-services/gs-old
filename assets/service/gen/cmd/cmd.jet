// Code generated by gs. DO NOT EDIT
package cmd

import (
	"fmt"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
	"github.com/gorilla/mux"
	"github.com/oklog/run"
	"net"
	"net/http"
	"os"
	"os/signal"
	"runtime/debug"
	"syscall"
	"{{ .Import }}/gen/transport"
	generatedTransport "{{ .Import }}/gen/transport/http"
)

func Run(transports transport.Transports, router *mux.Router, logger log.Logger) {
	var g run.Group
	{
		err := setupTransports(&g, transports, router, logger)
		if err != nil {
			_ = logger.Log("transport", "HTTP", "during", "Listen", "err", err)
			os.Exit(1)
		}
	}
	{
		var (
			cancelInterrupt = make(chan struct{})
			c               = make(chan os.Signal, 2)
		)
		g.Add(func() error {
			signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
			select {
			case sig := <-c:
				return fmt.Errorf("received signal %s", sig)
			case <-cancelInterrupt:
				return nil
			}
		}, func(error) {
			close(cancelInterrupt)
		})
		defer close(c)
	}
	// run the group
	if err := level.Error(logger).Log("exit", g.Run()); err != nil {
		println("error while writing log, this should never happen...")
		debug.PrintStack()
	}
}
func setupTransports(g *run.Group, transports transport.Transports, router *mux.Router, logger log.Logger) error {
	if transports.HTTP() != nil {
		listener, err := net.Listen("tcp", generatedTransport.Address())
		if err != nil {
			return err
		}
		generatedTransport.SetupHttp(transports.HTTP(), router)
		g.Add(func() error {
			_ = logger.Log("transport", "HTTP", "addr", generatedTransport.Address())
			return http.Serve(listener, router)
		}, func(error) {
			err := listener.Close()
			if err != nil {
				fmt.Printf("There where blocked Accept operations when closing listener : %v", err)
			}
		})
	}
	return nil
}
